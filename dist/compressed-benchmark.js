var e=require("react");function t(e,t,r,s){Object.defineProperty(e,t,{get:r,set:s,enumerable:!0,configurable:!0})}var r={};t(r,"createObserver",(()=>f)),t(r,"unwrap",(()=>w)),t(r,"configure",(()=>g)),t(r,"derive",(()=>b)),t(r,"reset",(()=>p)),t(r,"observe",(()=>I)),t(r,"observableFactories",(()=>s)),t(r,"ref",(()=>o)),t(r,"objectFactory",(()=>C)),t(r,"useObserver",(()=>k)),t(r,"useObserveSelector",(()=>E));const s=new Map,i=Symbol("ref");function o(e){return e&&s.get(e.constructor)?(e[i]=!0,e):e}const n=new WeakMap,a=Symbol("root"),c=new WeakMap;class h{constructor(e,t,r){if(this.parent=e,this.identifier=t,this.value=r,this.children=new Map,this.observersForChild=new Map,this.validContexts=new WeakSet,!s.has(r.constructor))throw new Error(`Value "${r}" is not observable`);e?e.children.set(t,this):n.set(r,this)}factory(){return s.get(this.value.constructor)}}class l{constructor(e,t,r){this.callback=t,this.disposers=new Set,this.config=y(),this.contexts=new WeakMap,this.rootContext=new d(this,e,void 0,a,r),this.contexts.set(this.rootContext.sharedNode,this.rootContext)}reset(){this.config=y(),this.disposers.forEach((e=>e())),this.disposers.clear()}}class d{constructor(e,t,r,s,i){this.observer=e,this.sharedNode=i||r?.sharedNode.children.get(s)||n.get(t)||new h(r?.sharedNode,s,t),this.observable=this.sharedNode.factory().makeObservable(this),c.set(this.observable,this),this.sharedNode.validContexts.add(this)}get value(){return this.sharedNode.value}createObservation(e){const t=this.sharedNode,r=this.observer;let s=t.observersForChild.get(e);s||t.observersForChild.set(e,s=new Map);let i=s.get(r);const o=0===i?.size;i||s.set(r,i=new Set),v?o||i.add(v):i.clear(),r.disposers.add((()=>s.delete(r)))}observeIdentifier(e,t,r){if("function"==typeof t)return t.bind(this.observable);const o=this.observer;if(t&&(n=t,!n?.[i])&&s.has(t.constructor)){let s=e===a?this:this.observer.contexts.get(this.sharedNode.children.get(e));return s&&!s.sharedNode.validContexts.has(s)&&(s=void 0),s||(s=new d(this.observer,t,this,e,void 0),this.observer.contexts.set(s.sharedNode,s)),o.config.select&&(v||o.config.intermediates||r)&&this.createObservation(e),s.observable}var n;return o.config.select&&this.createObservation(e),t}modifyIdentifier(e,t,r){const s=this.observer,i=this.sharedNode,o=i.children.get(e);o&&(t&&"object"==typeof t?o.value!==t&&(o.value=t,o.validContexts=new WeakSet,o.children.clear()):o.parent?.children.delete(e)),s.config.clone&&i.parent&&(i.value=i.factory().createClone(i.value),i.validContexts=new WeakSet),i.observersForChild.get(e)?.forEach(((t,s)=>{let o=!0;if(t.size){o=!1;for(const e of t){v=e;const t=e.deriveFn();o=o||!(e.isEqual||Object.is)(t,e.lastValue),e.lastValue=t,v=void 0}}s.config.enabled&&o&&s.callback?.(r?.[0].value||i.value,r?.[1]||e)})),i.parent?.factory().handleChange(i.parent.value,i.identifier,i.value),this.parent?this.parent.modifyIdentifier(i.identifier,i.value,r||[i,e]):e!==a&&this.modifyIdentifier(a,i.value,r||[i,e])}get parent(){return this.observer.contexts.get(this.sharedNode.parent)}}function f(...e){return 2===e.length?u(e[0],e[1]):function(e,t,r,s=Object.is){const i=u(e,((e,s)=>r(t(i),e,s)));return b((()=>t(i)),s),g(i,{select:!1}),i}(e[0],e[1],e[2])}function u(e,t){const r=c.get(e);return new l(w(e),t,r?.sharedNode).rootContext.observable}let v;function b(e,t){if(v)return e();v={deriveFn:e,isEqual:t};const r=v.lastValue=e();return v=void 0,r}const y=()=>({select:!0,clone:!1,intermediates:!1,enabled:!0});function g(e,t){const r=c.get(e);if(!r||r?.observer.rootContext!==r)throw new Error(`Cannot configure non-observable ${e}`);Object.assign(r.observer.config,t)}function p(e){const t=c.get(e);if(!t||t?.observer.rootContext!==t)throw new Error(`Cannot reset non-observable ${e}`);t.observer.reset()}function m(e){const t=c.get(e);if(!t)return null;if(t.sharedNode&&!t.sharedNode.validContexts.has(t))throw new Error("You are using a stale reference to an observable value.");return t}function w(e){const t=m(e);return t?t.sharedNode.value:e}function I(e){const t=m(e);return t?(t.observer.config.select&&(t.parent||t).observeIdentifier(t.sharedNode.identifier,t.value,!0),t.sharedNode.value):e}const C={makeObservable:e=>new Proxy(e.value,{getPrototypeOf:()=>Reflect.getPrototypeOf(e.value),getOwnPropertyDescriptor:(t,r)=>(e.observeIdentifier(r),Reflect.getOwnPropertyDescriptor(e.value,r)),ownKeys:()=>Reflect.ownKeys(e.value),has:(t,r)=>(e.observeIdentifier(r),Reflect.has(e.value,r)),get(t,r){if("toJSON"===r)return()=>e.value;const s=Reflect.get(e.value,r,e.value);return e.observeIdentifier(r,s)},set(t,r,s){const i=w(s);if(Reflect.get(e.value,r,e.value)===i)return!0;if(Array.isArray(e.value)){const t=e.value.length,s=Reflect.set(e.value,r,i,e.value);return t!==e.value.length&&e.modifyIdentifier("length"),"length"!==r&&e.modifyIdentifier(r,i),s}const o=Reflect.set(e.value,r,i,e.value);return e.modifyIdentifier(r,i),o},deleteProperty(t,r){const s=Reflect.deleteProperty(e.value,r);return s&&e.modifyIdentifier(r),s}}),handleChange(e,t,r){e[t]=r},createClone(e){if(Array.isArray(e))return[...e];const t={...e};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}};s.set(Object,C),s.set(Array,C);const O=Symbol("size");class S extends Set{constructor(e){super(),this.ctx=e}get set(){return this.ctx.value}add(e){const t=this.set.size;return this.set.add(e),t!==this.set.size&&this.ctx.modifyIdentifier(O),this}clear(){const e=this.set.size;this.set.clear(),e!==this.set.size&&this.ctx.modifyIdentifier(O)}delete(e){const t=this.set.delete(e);return t&&this.ctx.modifyIdentifier(O),t}forEach(e,t){this.set.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(r,r);e.call(t,i,i,this)}),t),this.size}has(e){return this.ctx.observeIdentifier(O),this.set.has(e)}get size(){return this.ctx.observeIdentifier(O,this.set.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(O);for(const e of this.set)yield this.ctx.observeIdentifier(e,e)}*entries(){for(const e of this[Symbol.iterator]())yield[e,e]}keys(){return this[Symbol.iterator]()}values(){return this[Symbol.iterator]()}}s.set(Set,{makeObservable:e=>new S(e),handleChange(e,t,r){e.delete(t),e.add(r)},createClone:e=>new Set(e)});const N=Symbol("size");class z extends Map{constructor(e){super(),this.ctx=e}get map(){return this.ctx.value}clear(){const e=this.map.size;this.map.clear(),e!==this.map.size&&this.ctx.modifyIdentifier(N)}delete(e){const t=this.map.delete(e);return t&&(this.ctx.modifyIdentifier(e),this.ctx.modifyIdentifier(N)),t}forEach(e,t){this.map.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(s,r);e.call(t,i,s,this)}),t),this.size}get(e){return this.ctx.observeIdentifier(e),this.map.get(e)}has(e){return this.ctx.observeIdentifier(e),this.map.has(e)}set(e,t){const r=this.map.size;return this.map.set(e,t),r!==this.map.size&&(this.ctx.modifyIdentifier(e,t),this.ctx.modifyIdentifier(N)),this}get size(){return this.ctx.observeIdentifier(N,this.ctx.value.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(N);for(const[e,t]of this.map){const r=this.ctx.observeIdentifier(e,t);yield[e,r]}}entries(){return this[Symbol.iterator]()}keys(){return this.ctx.observeIdentifier(N),this.map.keys()}*values(){for(const[e,t]of this[Symbol.iterator]())yield t}}function k(t){const[,r]=(0,e.useState)({}),s=(0,e.useRef)();s.current||(s.current=f(t,(()=>r({}))));const i=s.current;return p(i),g(i,{clone:!0}),(0,e.useEffect)((()=>{g(i,{select:!1})})),(0,e.useEffect)((()=>()=>{p(i),g(i,{enabled:!1})}),[i]),i}function E(t,r,s){const[,i]=(0,e.useState)({}),o=(0,e.useRef)(),n=(0,e.useRef)(f(t,(e=>o.current=r(e)),(e=>{s?.(e),i({})}))).current;return(0,e.useEffect)((()=>()=>p(n)),[]),[o.current,n]}s.set(Map,{makeObservable:e=>new z(e),handleChange(e,t,r){e.delete(t),e.set(t,r)},createClone:e=>new Map(e)}),x(r);