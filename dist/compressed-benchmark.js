var e=require("react");function t(e,t,r,s){Object.defineProperty(e,t,{get:r,set:s,enumerable:!0,configurable:!0})}var r={};t(r,"observe",(()=>c)),t(r,"unwrap",(()=>d)),t(r,"observableFactories",(()=>n)),t(r,"objectAndArrayObservableFactory",(()=>f)),t(r,"useObserver",(()=>p));const s=Symbol("root"),i=new WeakMap,n=new Map,o=new WeakMap;function a(e,t,r){let s=r?r.children.get(e):o.get(t);if(s)return s.value=t,s;const i=n.get(t.constructor);return i?(s={identifier:e,value:t,children:new Map,parent:r,factory:i,observersForChild:new Map,allContexts:new WeakSet},r?r.children.set(e,s):o.set(t,s),s):void 0}function l(e,t){let r=e.contextForNode.get(t);return r&&!t.allContexts.has(r)&&(r=void 0,e.contextForNode.delete(t)),r||(r={dataNode:t,observer:e,observable:null,get value(){return this.dataNode.value},observeIdentifier(r,s,i=!1){if("function"==typeof s)return s.bind(this.observable);function n(){if(!e.isObserving)return;let s=t.observersForChild.get(r);s||t.observersForChild.set(r,s=new Set),s.add(e),e.disposers.add((()=>s.delete(e)))}if(s){const o=a(r,s,t);if(o)return i&&n(),l(e,o).observable}return n(),s},modifyIdentifier(r){t.parent&&(t.factory=n.get(t.value.constructor),t.value=t.factory.createClone(t.value)),t.children.get(r)&&(t.children.get(r).allContexts=new Set),t.observersForChild.get(r)?.forEach((e=>{e.callback?.(t.value,r)})),t.parent?.factory.handleChange(t.parent.value,t.identifier,t.value),r!==s&&l(e,t.parent||t)?.modifyIdentifier(t.identifier)}},r.observable=t.factory.makeObservable(r),e.contextForNode.set(t,r),i.set(r.observable,r),t.allContexts.add(r),r)}function c(...e){return 2===e.length?function(e,t){const r=i.get(e),n=r?.dataNode||a(s,e);if(!n)throw new Error(`Cannot observe value ${e}`);const o={isObserving:!0,callback:t,disposers:new Set,contextForNode:new WeakMap};return[l(o,n).observable,{start(){o.isObserving=!0},stop(){o.isObserving=!1},disable(){o.callback=void 0},enable(){o.callback=t},reset(){o.disposers.forEach((e=>e())),o.disposers.clear()}}]}(e[0],e[1]):function(e,t,r){const[s,n]=c(e,(()=>{const n=t(s);let o,l=!1;Array.isArray(n)&&!i.has(n)?(o=n.map((e=>d(e,!1))),l=a.length===o.length&&o.every(((e,t)=>a[t]===e))):(o=d(n,!1),l=o===a),l||r(o,e),a=o})),o=t(s);let a;a=Array.isArray(o)&&!i.has(o)?o.map((e=>d(e))):d(o);return[s,()=>{n.stop(),n.disable(),n.reset()}]}(e[0],e[1],e[2])}function d(e,t=!0){const r=i.get(e);return r?(t&&l(r.observer,r.dataNode.parent||r.dataNode)?.observeIdentifier(r.dataNode.identifier,r.value,!0),r.dataNode.value):e}const f={makeObservable:e=>new Proxy(e,{has:(t,r)=>Reflect.has(e.value,r),get(t,r){if("toJSON"===r)return()=>e.value;const s=Reflect.get(e.value,r,e.value);return e.observeIdentifier(r,s)},set(t,r,s){const i=d(s);if(Reflect.get(e.value,r,e.value)===i)return!0;if(Array.isArray(e.value)){const t=e.value.length,s=Reflect.set(e.value,r,i,e.value);return t!==e.value.length&&e.modifyIdentifier("length"),"length"!==r&&e.modifyIdentifier(r),s}const n=Reflect.set(e.value,r,i,e.value);return e.modifyIdentifier(r),n},deleteProperty(t,r){const s=Reflect.deleteProperty(e.value,r);return e.modifyIdentifier(r),s}}),handleChange(e,t,r){e[t]=r},createClone(e){if(Array.isArray(e))return[...e];const t={...e};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}};n.set(Object,f),n.set(Array,f);const h=Symbol("size");class u extends Set{constructor(e){super(),this.ctx=e}get set(){return this.ctx.value}add(e){const t=this.set.size;return this.set.add(e),t!==this.set.size&&this.ctx.modifyIdentifier(h),this}clear(){const e=this.set.size;this.set.clear(),e!==this.set.size&&this.ctx.modifyIdentifier(h)}delete(e){const t=this.set.delete(e);return t&&this.ctx.modifyIdentifier(h),t}forEach(e,t){this.set.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(r,r);e.call(t,i,i,this)}),t),this.size}has(e){return this.ctx.observeIdentifier(h),this.set.has(e)}get size(){return this.ctx.observeIdentifier(h,this.set.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(h);for(const e of this.set)yield this.ctx.observeIdentifier(e,e)}*entries(){for(const e of this[Symbol.iterator]())yield[e,e]}keys(){return this[Symbol.iterator]()}values(){return this[Symbol.iterator]()}}n.set(Set,{makeObservable:e=>new u(e),handleChange(e,t,r){e.delete(t),e.add(r)},createClone:e=>new Set(e)});const v=Symbol("size");class b extends Map{constructor(e){super(),this.ctx=e}get map(){return this.ctx.value}clear(){const e=this.map.size;this.map.clear(),e!==this.map.size&&this.ctx.modifyIdentifier(v)}delete(e){const t=this.map.delete(e);return t&&(this.ctx.modifyIdentifier(e),this.ctx.modifyIdentifier(v)),t}forEach(e,t){this.map.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(s,r);e.call(t,i,s,this)}),t),this.size}get(e){return this.ctx.observeIdentifier(e),this.map.get(e)}has(e){return this.ctx.observeIdentifier(e),this.map.has(e)}set(e,t){const r=this.map.size;return this.map.set(e,t),r!==this.map.size&&(this.ctx.modifyIdentifier(e),this.ctx.modifyIdentifier(v)),this}get size(){return this.ctx.observeIdentifier(v,this.ctx.value.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(v);for(const[e,t]of this.map){const r=this.ctx.observeIdentifier(e,t);yield[e,r]}}entries(){return this[Symbol.iterator]()}keys(){return this.ctx.observeIdentifier(v),this.map.keys()}*values(){for(const[e,t]of this[Symbol.iterator]())yield t}}n.set(Map,{makeObservable:e=>new b(e),handleChange(e,t,r){e.delete(t),e.set(t,r)},createClone:e=>new Map(e)});var y={};function p(t){const[,r]=(0,e.useState)({}),[s,{reset:i,start:n,stop:o}]=(0,e.useRef)(c(t,(()=>r({})))).current;return i(),n(),(0,e.useEffect)((()=>{o()})),(0,e.useLayoutEffect)((()=>()=>i()),[]),[s,{start:n,stop:o}]}t(y,"useObserver",(()=>p)),x(r),x(y);