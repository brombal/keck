var e=require("react");const t=Symbol("root"),r=new WeakMap,s=new Map,i=new WeakMap;function n(e,t,r){let n=r?r.children.get(e):i.get(t);if(n)return n.value=t,n;const o=s.get(t.constructor);return o?(n={identifier:e,value:t,children:new Map,parent:r,factory:o,observersForChild:new Map,allContexts:new WeakSet},r?r.children.set(e,n):i.set(t,n),n):void 0}function o(e,i){let a=e.contextForNode.get(i);return a&&!i.allContexts.has(a)&&(a=void 0,e.contextForNode.delete(i)),a||(a={dataNode:i,observer:e,observable:null,get value(){return this.dataNode.value},observeIdentifier(t,r,s=!1){if("function"==typeof r)return r.bind(this.observable);function a(){if(!e.isObserving)return;let r=i.observersForChild.get(t);r||i.observersForChild.set(t,r=new Set),r.add(e),e.disposers.add((()=>r.delete(e)))}if(r){const l=n(t,r,i);if(l)return s&&a(),o(e,l).observable}return a(),r},modifyIdentifier(r){i.parent&&(i.factory=s.get(i.value.constructor),i.value=i.factory.createClone(i.value)),i.children.get(r)&&(i.children.get(r).allContexts=new Set),i.observersForChild.get(r)?.forEach((e=>{e.callback?.(i.value,r)})),i.parent?.factory.handleChange(i.parent.value,i.identifier,i.value),r!==t&&o(e,i.parent||i)?.modifyIdentifier(i.identifier)}},a.observable=i.factory.makeObservable(a),e.contextForNode.set(i,a),r.set(a.observable,a),i.allContexts.add(a),a)}function a(e,s){const i=r.get(e),a=i?.dataNode||n(t,e);if(!a)throw new Error(`Cannot observe value ${e}`);const l={isObserving:!0,callback:s,disposers:new Set,contextForNode:new WeakMap};return[o(l,a).observable,{start(){l.isObserving=!0},stop(){l.isObserving=!1},disable(){l.callback=void 0},enable(){l.callback=s},reset(){l.disposers.forEach((e=>e())),l.disposers.clear()}}]}function l(e,t=!0){const s=r.get(e);return s?(t&&o(s.observer,s.dataNode.parent||s.dataNode)?.observeIdentifier(s.dataNode.identifier,s.value,!0),s.dataNode.value):e}const c={makeObservable:e=>new Proxy(e,{has:(t,r)=>Reflect.has(e.value,r),get(t,r){if("toJSON"===r)return()=>e.value;const s=Reflect.get(e.value,r,e.value);return e.observeIdentifier(r,s)},set(t,r,s){const i=l(s);if(Reflect.get(e.value,r,e.value)===i)return!0;if(Array.isArray(e.value)){const t=e.value.length,s=Reflect.set(e.value,r,i,e.value);return t!==e.value.length&&e.modifyIdentifier("length"),"length"!==r&&e.modifyIdentifier(r),s}const n=Reflect.set(e.value,r,i,e.value);return e.modifyIdentifier(r),n},deleteProperty(t,r){const s=Reflect.deleteProperty(e.value,r);return e.modifyIdentifier(r),s}}),handleChange(e,t,r){e[t]=r},createClone(e){if(Array.isArray(e))return[...e];const t={...e};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}};s.set(Object,c),s.set(Array,c);const d=Symbol("size");class f extends Set{constructor(e){super(),this.ctx=e}get set(){return this.ctx.value}add(e){const t=this.set.size;return this.set.add(e),t!==this.set.size&&this.ctx.modifyIdentifier(d),this}clear(){const e=this.set.size;this.set.clear(),e!==this.set.size&&this.ctx.modifyIdentifier(d)}delete(e){const t=this.set.delete(e);return t&&this.ctx.modifyIdentifier(d),t}forEach(e,t){this.set.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(r,r);e.call(t,i,i,this)}),t),this.size}has(e){return this.ctx.observeIdentifier(d),this.set.has(e)}get size(){return this.ctx.observeIdentifier(d,this.set.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(d);for(const e of this.set)yield this.ctx.observeIdentifier(e,e)}*entries(){for(const e of this[Symbol.iterator]())yield[e,e]}keys(){return this[Symbol.iterator]()}values(){return this[Symbol.iterator]()}}s.set(Set,{makeObservable:e=>new f(e),handleChange(e,t,r){e.delete(t),e.add(r)},createClone:e=>new Set(e)});const h=Symbol("size");class u extends Map{constructor(e){super(),this.ctx=e}get map(){return this.ctx.value}clear(){const e=this.map.size;this.map.clear(),e!==this.map.size&&this.ctx.modifyIdentifier(h)}delete(e){const t=this.map.delete(e);return t&&(this.ctx.modifyIdentifier(e),this.ctx.modifyIdentifier(h)),t}forEach(e,t){this.map.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(s,r);e.call(t,i,s,this)}),t),this.size}get(e){return this.ctx.observeIdentifier(e),this.map.get(e)}has(e){return this.ctx.observeIdentifier(e),this.map.has(e)}set(e,t){const r=this.map.size;return this.map.set(e,t),r!==this.map.size&&(this.ctx.modifyIdentifier(e),this.ctx.modifyIdentifier(h)),this}get size(){return this.ctx.observeIdentifier(h,this.ctx.value.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(h);for(const[e,t]of this.map){const r=this.ctx.observeIdentifier(e,t);yield[e,r]}}entries(){return this[Symbol.iterator]()}keys(){return this.ctx.observeIdentifier(h),this.map.keys()}*values(){for(const[e,t]of this[Symbol.iterator]())yield t}}s.set(Map,{makeObservable:e=>new u(e),handleChange(e,t,r){e.delete(t),e.set(t,r)},createClone:e=>new Map(e)}),a({},(()=>{})),l({}),function(t){const[,r]=(0,e.useState)({}),[s,{reset:i,start:n,stop:o}]=(0,e.useRef)(a(t,(()=>r({})))).current;i(),n(),(0,e.useEffect)((()=>{o()})),(0,e.useLayoutEffect)((()=>()=>i()),[])}({});