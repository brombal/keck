var e=require("react");const t=Symbol("root"),r=new Map,s=Symbol("getContext"),i=new Map;function n(e,t,s){let n=s?s.children.get(e):i.get(t);if(n)return n.value=t,n;const o=r.get(t.constructor);return o?(n={identifier:e,value:t,children:new Map,parent:s,factory:o,observersForId:new Map,contextForObserver:new Map},s?s.children.set(e,n):(n.__root=!0,i.set(t,n)),n):void 0}function o(e,s){let i,a=s.contextForObserver.get(e);return a||(a={sharedRef:s,observer:e,get value(){return this.sharedRef.value},get observable(){return i||(i=this.sharedRef.factory.makeObservable(this))},invalidateObservable(){i=void 0},observeIdentifier(t,r,i=!1){if("function"==typeof r)return r.bind(this.observable);function a(){if(!e.isObserving)return;let r=s.observersForId.get(t);r||s.observersForId.set(t,r=new Set),r.add(e),e.disposers.add((()=>r.delete(e)))}if(r){const c=n(t,r,s);if(c)return i&&a(),o(e,c).observable}return a(),r},modifyIdentifier(i){s.parent&&(s.factory=r.get(s.value.constructor),s.value=s.factory.createClone(s.value)),s.children.get(i)?.contextForObserver.forEach((e=>e.invalidateObservable())),s.observersForId.get(i)?.forEach((e=>{e.callback?.(s.value,i)})),s.parent?.factory.handleChange(s.parent.value,s.identifier,s.value),s.parent?s.parent?.contextForObserver.get(e).modifyIdentifier(s.identifier):i!==t&&s.contextForObserver.get(e).modifyIdentifier(t)}},s.contextForObserver.set(e,a),a)}function a(e,r){e=c(e,!1);const s=n(t,e);if(!s)throw new Error(`Cannot observe value ${e}`);const i={isObserving:!0,callback:r,disposers:new Set};return{store:o(i,s).observable,observe(){i.isObserving=!0},unobserve(){i.isObserving=!1},reset(){i.disposers.forEach((e=>e())),i.disposers.clear()},disable(){i.isObserving=!1,i.callback=void 0},enable(){i.callback=r}}}function c(e,r=!0){const i=e?.[s]?.();return i?(r&&(i.sharedRef.parent?i.sharedRef.parent.contextForObserver.get(i.observer)?.observeIdentifier(i.sharedRef.identifier,i.sharedRef.value,!0):i.sharedRef.contextForObserver.get(i.observer)?.observeIdentifier(t,e)),i.sharedRef.value):e}const l={makeObservable:e=>new Proxy(e,{has:(t,r)=>r===s||Reflect.has(e.value,r),get(t,r){if(r===s)return()=>e;const i=Reflect.get(e.value,r,e.value);return e.observeIdentifier(r,i)},set(t,r,i){if(r===s)return!0;const n=c(i);if(Reflect.get(e.value,r,e.value)===n)return!0;if(Array.isArray(e.value)){const t=e.value.length,s=Reflect.set(e.value,r,n,e.value);return t!==e.value.length&&e.modifyIdentifier("length"),"length"!==r&&e.modifyIdentifier(r),s}const o=Reflect.set(e.value,r,n,e.value);return e.modifyIdentifier(r),o},deleteProperty(t,r){const s=Reflect.deleteProperty(e.value,r);return e.modifyIdentifier(r),s}}),handleChange(e,t,r){e[t]=r},createClone(e){if(Array.isArray(e))return[...e];const t={...e};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}};r.set(Object,l),r.set(Array,l);const f=Symbol("size");class d extends Set{constructor(e){super(),this.ctx=e}get set(){return this.ctx.value}add(e){const t=this.set.size;return this.set.add(e),t!==this.set.size&&this.ctx.modifyIdentifier(f),this}clear(){const e=this.set.size;this.set.clear(),e!==this.set.size&&this.ctx.modifyIdentifier(f)}delete(e){this.set.size;const t=this.set.delete(e);return t&&this.ctx.modifyIdentifier(f),t}forEach(e,t){this.set.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(r,r);e.call(t,i,i,this)}),t),this.size}has(e){return this.ctx.observeIdentifier(f),this.set.has(e)}get size(){return this.ctx.observeIdentifier(f,this.set.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(f);for(const e of this.set)yield this.ctx.observeIdentifier(e,e)}*entries(){for(const e of this[Symbol.iterator]())yield[e,e]}keys(){return this[Symbol.iterator]()}values(){return this[Symbol.iterator]()}[s](){return this.ctx}}r.set(Set,{makeObservable:e=>new d(e),handleChange(e,t,r){e.delete(t),e.add(r)},createClone:e=>new Set(e)});const h=Symbol("size");class u extends Map{constructor(e){super(),this.ctx=e}get map(){return this.ctx.value}clear(){const e=this.map.size;this.map.clear(),e!==this.map.size&&this.ctx.modifyIdentifier(h)}delete(e){const t=this.map.delete(e);return t&&this.ctx.modifyIdentifier(e),t}forEach(e,t){this.map.forEach(((r,s)=>{const i=this.ctx.observeIdentifier(s,r);e.call(t,i,s,this)}),t),this.size}get(e){return this.ctx.observeIdentifier(e),this.map.get(e)}has(e){return this.ctx.observeIdentifier(e),this.map.has(e)}set(e,t){const r=this.map.size;return this.map.set(e,t),r!==this.map.size&&this.ctx.modifyIdentifier(e),this}get size(){return this.ctx.observeIdentifier(h,this.map.size)}*[Symbol.iterator](){this.ctx.observeIdentifier(h);for(const[e,t]of this.map){const r=this.ctx.observeIdentifier(e,t);yield[e,r]}}entries(){return this[Symbol.iterator]()}keys(){return this.ctx.observeIdentifier(h),this.map.keys()}*values(){for(const[e,t]of this[Symbol.iterator]())yield t}[s](){return this.ctx}}r.set(Map,{makeObservable:e=>new u(e),handleChange(e,t,r){e.delete(t),e.set(t,r)},createClone:e=>new Map(e)}),a({},(()=>{})),c({}),function(t){const[,r]=(0,e.useState)({}),{store:s,reset:i,observe:n,unobserve:o}=(0,e.useRef)(a(t,(()=>r({})))).current;i(),n(),(0,e.useEffect)((()=>{o()})),(0,e.useLayoutEffect)((()=>()=>i()),[])}({});