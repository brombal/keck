{"version":3,"file":"react.js","sources":["src/react.ts"],"sourcesContent":["import { type DeriveEqualFn, focus, observe, reset, unwrap } from 'keck';\nimport { useLayoutEffect, useRef, useState } from 'react';\n\nlet finalizationRegistry: FinalizationRegistry<any> | undefined;\n\nif (window.FinalizationRegistry && (window as any).KECK_OBSERVE_GC && !finalizationRegistry) {\n  console.log('keck/react: initializing FinalizationRegistry');\n  finalizationRegistry = new FinalizationRegistry((...args) =>\n    console.log('keck/react: FinalizationRegistry callback invoked', args),\n  );\n}\n\nexport function useObserver<TData extends object>(data: TData, callback?: () => void): TData {\n  const mounted = useRef(true);\n  const [, forceRerender] = useState({});\n  const ref = useRef<TData>();\n  if (!ref.current) {\n    ref.current = observe(data, () => {\n      if (!mounted.current) return;\n      callback?.();\n      forceRerender({});\n    });\n    finalizationRegistry?.register(ref.current, 'Keck observable released');\n  }\n  const state = ref.current;\n\n  // Begin observing on render\n  focus(state);\n  reset(state);\n\n  // Stop observing as soon as component finishes rendering\n  useLayoutEffect(() => {\n    focus(state, false);\n  });\n\n  useLayoutEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  return state;\n}\n\n/**\n * Hook that will observe `data`, and only re-render the component when the result of `deriveFn` changes.\n * Returns the result of `deriveFn`.\n */\nexport function useDerived<TData extends object, TDerived>(\n  data: TData,\n  deriveFn: (state: TData) => TDerived,\n  isEqual?: DeriveEqualFn<TDerived>,\n): TDerived {\n  const [, forceRerender] = useState({});\n\n  const deriveResultRef = useRef<TDerived>();\n\n  const ref = useRef<TData>();\n  if (!ref.current) {\n    ref.current = observe(\n      data,\n      () => forceRerender({}),\n      (data): TDerived => {\n        return (deriveResultRef.current = deriveFn(data));\n      },\n      isEqual,\n    );\n    finalizationRegistry?.register(ref.current, 'Keck derived observable released');\n  }\n\n  return unwrap(deriveResultRef.current!);\n}\n"],"names":[],"mappings":";;;AAGA,IAAI,oBAA2D;AAE/D,IAAI,MAAM,CAAC,oBAAoB,IAAK,MAAc,CAAC,eAAe,IAAI,CAAC,oBAAoB,EAAE;AAC3F,IAAA,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC;AAC5D,IAAA,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,CAAC,GAAG,IAAI,KACtD,OAAO,CAAC,GAAG,CAAC,mDAAmD,EAAE,IAAI,CAAC,CACvE;AACH;AAEgB,SAAA,WAAW,CAAuB,IAAW,EAAE,QAAqB,EAAA;AAClF,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;IAC5B,MAAM,GAAG,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;AACtC,IAAA,MAAM,GAAG,GAAG,MAAM,EAAS;AAC3B,IAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;QAChB,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,MAAK;YAC/B,IAAI,CAAC,OAAO,CAAC,OAAO;gBAAE;YACtB,QAAQ,IAAI;YACZ,aAAa,CAAC,EAAE,CAAC;AACnB,SAAC,CAAC;QACF,oBAAoB,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,0BAA0B,CAAC;;AAEzE,IAAA,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO;;IAGzB,KAAK,CAAC,KAAK,CAAC;IACZ,KAAK,CAAC,KAAK,CAAC;;IAGZ,eAAe,CAAC,MAAK;AACnB,QAAA,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC;AACrB,KAAC,CAAC;IAEF,eAAe,CAAC,MAAK;AACnB,QAAA,OAAO,CAAC,OAAO,GAAG,IAAI;AACtB,QAAA,OAAO,MAAK;AACV,YAAA,OAAO,CAAC,OAAO,GAAG,KAAK;AACzB,SAAC;KACF,EAAE,EAAE,CAAC;AAEN,IAAA,OAAO,KAAK;AACd;AAEA;;;AAGG;SACa,UAAU,CACxB,IAAW,EACX,QAAoC,EACpC,OAAiC,EAAA;IAEjC,MAAM,GAAG,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;AAEtC,IAAA,MAAM,eAAe,GAAG,MAAM,EAAY;AAE1C,IAAA,MAAM,GAAG,GAAG,MAAM,EAAS;AAC3B,IAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;AAChB,QAAA,GAAG,CAAC,OAAO,GAAG,OAAO,CACnB,IAAI,EACJ,MAAM,aAAa,CAAC,EAAE,CAAC,EACvB,CAAC,IAAI,KAAc;YACjB,QAAQ,eAAe,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;SACjD,EACD,OAAO,CACR;QACD,oBAAoB,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,kCAAkC,CAAC;;AAGjF,IAAA,OAAO,MAAM,CAAC,eAAe,CAAC,OAAQ,CAAC;AACzC;;;;"}